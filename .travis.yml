language: cpp

stages:
  - build
  - coverage

common_sources: &all_sources
  - ubuntu-toolchain-r-test
  - llvm-toolchain-trusty
  - llvm-toolchain-trusty-3.9
  - llvm-toolchain-trusty-4.0
  - llvm-toolchain-trusty-5.0
  - llvm-toolchain-trusty-6.0

build_both: &build_both
    script: 
      - cd build-debug
      - make -j2 install
      - ctest -j2
      - cd ../build-release
      - make -j2 install
      - ctest -j2

build_release: &build_debug
    script: 
      - cd build-debug
      - make -j2 install
      - ctest -j2

build: &build
    stage: build
    before_script:
      - cmake -H. -Bbuild-debug -DCMAKE_BUILD_TYPE=Debug -DENABLE_TESTING=1 -DBUILD_FORTRAN_WRAPPER=ON -DCMAKE_INSTALL_PREFIX=$MPP_DIRECTORY/install
      - cmake -H. -Bbuild-release -DCMAKE_BUILD_TYPE=Release -DENABLE_TESTING=1 -DBUILD_FORTRAN_WRAPPER=ON -DCMAKE_INSTALL_PREFIX=$MPP_DIRECTORY/install
    <<: *build_both

before_install:
    - eval "${MATRIX_EVAL}"

install: 
  - export MPP_DIRECTORY=$PWD
  - export MPP_DATA_DIRECTORY=$MPP_DIRECTORY/data
  - export PATH=$MPP_DIRECTORY/install/bin:$PATH
  - export LD_LIBRARY_PATH=$MPP_DIRECTORY/install/lib:$LD_LIBRARY_PATH
  - export DYLD_LIBRARY_PATH=$MPP_DIRECTORY/install/lib:$DYLD_LIBRARY_PATH

jobs:
  include:
    # Linux / Clang builds
    - os: linux
      compiler: clang
      addons:
        apt:
          sources: *all_sources
          packages: ['clang-4.0']
      env: MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0"
      <<: *build

    - os: linux
      compiler: clang
      addons:
        apt:
          sources: *all_sources
          packages: ['clang-5.0']
      env: MATRIX_EVAL="CC=clang-5.0 && CXX=clang++-5.0"
      <<: *build
    
    - os: linux
      compiler: clang
      addons:
        apt:
          sources: *all_sources
          packages: ['clang-6.0']
      env: MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0"
      <<: *build
    
    # Linux / GCC builds
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: *all_sources
          packages: ['g++-4.9']
      env: MATRIX_EVAL="CC=gcc-4.9 && CXX=g++-4.9"
      <<: *build


    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: *all_sources
          packages: ['g++-5']
      env: MATRIX_EVAL="CC=gcc-5 && CXX=g++-5"
      <<: *build
    
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: *all_sources
          packages: ['g++-6']
      env: MATRIX_EVAL="CC=gcc-6 && CXX=g++-6"
      <<: *build
    
    # OSX / Clang Builds
    - os: osx
      osx_image: xcode7.3
      compiler: clang
      <<: *build
    
    - os: osx
      osx_image: xcode8
      compiler: clang
      <<: *build
    
    - os: osx
      osx_image: xcode9.1
      compiler: clang
      <<: *build
    
    # Code coverage
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: *all_sources
          packages: ['lcov', 'g++-7']
      env: MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
      stage: coverage
      before_script:
          - cmake -H. -Bbuild-debug -DCMAKE_BUILD_TYPE=Debug -DENABLE_TESTING=1 -DENABLE_COVERAGE=TRUE -DCMAKE_INSTALL_PREFIX=$MPP_DIRECTORY/install
      <<: *build_debug
      after_script:
        - make coverage
        - bash <(curl -s https://codecov.io/bash) -f mutation++.info || echo "Codecov did not collect coverage reports"
